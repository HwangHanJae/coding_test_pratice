#dfs(깊이 우선 탐색)
#그래프에서 깊은 부분을 우선적으로 탐색

#인접행렬(adjacency matrix) 방식예제
INF = 99999999

#2차원 리스트를  이용한 인접행렬 표현
graph = [
  [0,7,5],
  [7,0,INF],
  [5,INF,0]
]

#print(graph)

#인접리스트(adjacency list) 방식예제
#연결리스트라는 자료구조를 이용하여 구현

#인접리스트를 표현할 때는 단순히 2차원 리스트를 이용하면 된다.
#행(row)이 3개인 2차원리스트로 인접리스트 표현
graph =[[] for _ in range(3)]

#노드 0에 연결된 노드 정보 저정(노드, 거리)
graph[0].append((1,7))
graph[0].append((2,5))
print(graph)

#노드 1에 연결된 노드 정보 지정(노드, 거리)
graph[1].append((0,7))
print(graph)

#노드 2에 견결되 노드 정보 지정(노드, 거리)
graph[2].append((0,5))
print(graph)




#DFS 메서드 정의

def dfs(graph, v, visited):
  #현재 노드를 방문 처리
  visited[v] = True
  print(v, end=' ')
  #현재 노드와 연결된 다른 노드를 재귀적으로 방문
  for i in graph[v]:
    if not visited[i]:
      dfs(graph, i, visited)

#각 노드가 연결된 정보를 리스트 자료형으로 표현(2차원 리스트)

# graph = [
#   [],
#   [2,3,8],
#   [1,7],
#   [1,4,5],
#   [3,5],
#   [3,4],
#   [7],
#   [2,6,8],
#   [1,7]
# ]

graph = [
  [],       #0
  [2,4,6],  #1
  [1,3],    #2
  [2,7],    #3
  [1,5],    #4
  [4,6,8],  #5
  [1,5],    #6
  [3,8],    #7
  [5,7]     #8
      
]

#각 노드가 방문된 정보를 리스트 자료형으로 표현(1차원 리스트)
visited = [False] * len(graph)

#정의된 dfs 함수 호출
dfs(graph, 1, visited)
